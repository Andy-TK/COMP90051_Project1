# -*- coding: utf-8 -*-
"""LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ow5MyrzELxOxZX3QIi8pV2PePbi18mUK
"""

from keras.layers import Dense, Input, Flatten, Dropout
from keras.layers import Dense, LSTM, Embedding
from keras.models import Sequential
from keras.preprocessing.text import Tokenizer
from sklearn.model_selection import train_test_split
import pandas as pd
from keras.preprocessing.sequence import pad_sequences

df = pd.read_csv('drive/My Drive/SML/all_clean_data.csv', encoding='UTF-8')
df = df.fillna(value='')
df['user']=df['user'].apply(str)

tweet_list = df['tweet'].tolist()
user_list = df['user'].tolist()

tokenizer = Tokenizer(num_words=140, filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n,lower=True,split=' ')

tokenizer.fit_on_texts(tweet_list)
X = tokenizer.texts_to_sequences(tweet_list)#得到词索引
X = pad_sequences(X)

batch_size = 32
model = Sequential()
model.add(Embedding(2000, output_dim = 128, input_length = X.shape[1]))
model.add(LSTM(units = 196, dropout = 0.2, recurrent_dropout = 0.2))
model.add(Dense(9297, activation='softmax'))
model.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
print(model.summary())
Y = pd.get_dummies(user_list)
X_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size = 0.3, random_state = 42)
model.fit(X_train, Y_train, batch_size = batch_size, epochs = 1, verbose = 2)
loss,acc = model.evaluate(X_test, Y_test, verbose = 2, batch_size = batch_size)
print("Loss: %.2f" % (loss))19:03
print("Validation Accuracy: %.2f" % (acc))

tokenizer = Tokenizer(num_words=140, filters='!"#$%&()*+,-./:;<=>?@[\\]^_`{|}~\t\n',lower=True,split=' ')

tokenizer.fit_on_texts(tweet_list)
X = tokenizer.texts_to_sequences(tweet_list)#得到词索引
X = pad_sequences(X)

batch_size = 32
model = Sequential()
model.add(Embedding(140, output_dim = 128, input_length = X.shape[1]))
model.add(LSTM(units = 196, dropout = 0.2, recurrent_dropout = 0.2))
model.add(Dense(9297, activation='softmax'))
model.compile(loss = 'categorical_crossentropy', optimizer='adam', metrics = ['accuracy'])
print(model.summary())
Y = pd.get_dummies(user_list)
X_train, X_test, Y_train, Y_test = train_test_split( X, Y, test_size = 0.3, random_state = 42)
model.fit(X_train, Y_train, batch_size = batch_size, epochs = 5, verbose = 2)
loss,acc = model.evaluate(X_test, Y_test, verbose = 2, batch_size = batch_size)
print("Loss: %.2f" % (loss))
print("Validation Accuracy: %.2f" % (acc))